from pygame import spritefrom model.entity.alive.Fire import Firefrom model.entity.alive.enemies.Bowser import Bowserfrom model.entity.alive.enemies.Monster import Monsterclass LogicMonster:    @staticmethod    def update_monster(monsters, blocks, entities, heroes):        for monster in monsters:            if monster.changing:                if isinstance(monster, Monster):                    monster.change_image()                if monster.up:                    if monster.on_ground and not isinstance(monster, Fire):                        monster.x = monster.rect.left                        monster.yvel = -monster.gravity                if isinstance(monster, Fire):                    if monster.side:                        monster.rect.x -= monster.move_speed                    else:                        monster.rect.x += monster.move_speed                if monster.left and not isinstance(monster, Fire):                    monster.xvel = -monster.move_speed                if monster.right and not isinstance(monster, Fire):                    monster.xvel = monster.move_speed                if not monster.on_ground and not isinstance(monster, Fire):                    monster.yvel += monster.gravity                monster.on_ground = False                if not isinstance(monster, Fire):                    monster.rect.y += monster.yvel                if LogicMonster.contact_with_blocks(monster, monsters, 0, monster.yvel, blocks, entities, heroes)!=0:                    if not isinstance(monster, Fire):                        monster.rect.x += monster.xvel                    LogicMonster.contact_with_blocks(monster, monsters, monster.xvel, 0, blocks, entities, heroes)                    if abs(monster.x-monster.rect.x) > 400:                        if isinstance(monster, Fire):                            monsters.remove(monster)                            entities.remove(monster)                            blocks.pop(len(blocks)-1)                        if isinstance(monster, Bowser):                            monster.side = not (monster.side)                        monster.left, monster.right = monster.right, monster.left    @staticmethod    def contact_with_blocks(monster,monsters, xvel, yvel, blocks,entities, heroes):        if not heroes.exist():            for e in entities:                if sprite.collide_rect(monster, e):                    if isinstance(monster, Fire) and isinstance(e, Monster):                        if isinstance(e, Bowser) :                            if monster.side!=e.side:                                e.lifes = -monster.power                                e.killed(monsters, entities, blocks)                        else:                            e.lifes = -monster.power                            e.killed(monsters, entities, blocks)                        monster.killed(monsters, entities)                        return 0                    if isinstance(monster, Fire) and e.rect.top < monster.rect.top < e.rect.bottom:                        monster.killed(monsters, entities)                        return 0            for hero in heroes.lst:                if sprite.collide_rect(hero, monster) and isinstance(monster, Monster):                    heroes.killed(hero, entities)            for block in blocks:                if sprite.collide_rect(monster, block) and not isinstance(block, Monster):                        if xvel > 0:                            monster.rect.right = block.rect.left                            monster.left = True                            monster.right = False                            if isinstance(monster, Bowser):                                monster.side = not(monster.side)                        if xvel < 0:                            monster.rect.left = block.rect.right                            monster.left = False                            monster.right = True                            if isinstance(monster, Bowser):                                monster.side = not (monster.side)                        if yvel > 0:                            monster.rect.bottom = block.rect.top                            monster.yvel = 0                            monster.on_ground = True                        if yvel < 0:                            monster.rect.top = block.rect.bottom                            monster.yvel = 0